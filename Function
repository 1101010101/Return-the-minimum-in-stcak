//实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返 回栈中最小元素的操作。
//【要求】 
//1．pop、push、getMin操作的时间复杂度都是O(1)。 
//2．设计的栈类型可以使用现成的栈结构。
#include<iostream>
#include<stdlib.h>
#include<stack>
using namespace std;

typedef int stackEntry;

class SpecialStack
{
public:
	void push(stackEntry x);
	void pop();
	stackEntry getMin();
	SpecialStack();
	~SpecialStack();
private:
	stack<int> min;
	stack<int> data;
	int size;
};

int main()
{
	SpecialStack a;
	a.push(4);
	a.push(10);
	a.push(10);
	a.push(9);
	a.push(2);
	cout << a.getMin() << endl;
	system("pause");
	return 0;
}

SpecialStack::SpecialStack()
{
	size = 0;
}

SpecialStack::~SpecialStack()
{

}

void SpecialStack::push(stackEntry x)
{
	if (size == 0)
	{
		data.push(x);
		min.push(x);
		++size;
	}
	else
	{
		data.push(x);
		if (x < min.top())
			min.push(x);
		else
			min.push(min.top());
		++size;
	}
}

void SpecialStack::pop()
{
	if (size == 0)
	{
		cout << "The stack is EMPTY!" << endl;
		return;
	}
	else
	{
		data.pop();
		min.pop();
		--size;
	}
}

stackEntry SpecialStack::getMin()
{
	if (size == 0)
	{
		cout << "The stack is EMPTY!" << endl;
		return -0xFFFF;
	}
	else
	{
		return min.top();
	}
}
